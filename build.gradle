plugins {
    id "org.sonarqube" version "2.5"
    id "io.codearte.nexus-staging" version "0.7.0"
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: "jacoco"

    repositories {
        mavenCentral()
    }

    configurations {
        wagon
    }

    dependencies {
        testCompile "junit:junit:${project.property('junit.version')}"
        wagon "org.apache.maven.wagon:wagon-ssh:2.12"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all" << "-profile" << "compact1"
    }

    clean {
        delete 'out'
    }

    test {
        testLogging {
            showStandardStreams = false
            exceptionFormat = 'full'
        }
    }

    tasks.withType(FindBugs) {
        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    tasks.withType(Pmd) {
        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    tasks.withType(Checkstyle) {
        ignoreFailures = true
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
        }
    }

    sonarqube {
        properties {
            property "sonar.projectName", "xbib Secure Shell Daemon"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.tests", "src/test/java"
            property "sonar.scm.provider", "git"
            property "sonar.java.coveragePlugin", "jacoco"
            property "sonar.junit.reportsPath", "build/test-results/test/"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
    }
    artifacts {
        archives sourcesJar, javadocJar
    }
    if (project.hasProperty('signing.keyId')) {
        signing {
            sign configurations.archives
        }
    }

    apply from: "${rootProject.projectDir}/gradle/ext.gradle"
    apply from: "${rootProject.projectDir}/gradle/publish.gradle"

}
